# hpc-testing
# Copyright (C) 2018 SUSE LLC
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set_ipoib_mode()
{
	local host=$1
	local port=$2
	local mode=$3

	tp $host "echo $mode > /sys/class/net/$port/mode"
	R_MODE=$(tpq $host "cat /sys/class/net/$port/mode")
	if [ "$R_MODE" != "$mode" ]; then
		fatal_error "Failed to set IPoIB mode"
	fi
}
set_ipoib_up()
{
	local host=$1
	local port=$2
	local ipaddr=$3 #ip/netmask
        local ipv6addr=$4

	tp $host "ip link set dev $port up &&
			  ip -4 addr flush $port &&
			  ip addr add $ipaddr dev $port &&
			  (ip addr add $ipv6addr/64 dev $port || true)"
}
set_ipoib_down()
{
	local host=$1
	local port=$2

	tp $host "ip link set dev $port down &&
	   		  ip -4 addr flush $port"
}
disable_enhanced()
{
	local host=$1
	tp $host "rmmod mlx5_ib && modprobe mlx5_ib ipoib_enhanced=0"
}
enable_enhanced()
{
	local host=$1
	tp $host "rmmod mlx5_ib && modprobe mlx5_ib ipoib_enhanced=1"
}
reload_mlx5_ib()
{
	local host=$1
	tp $host "rmmod mlx5_ib && modprobe mlx5_ib"
}
driver_resetup()
{
    local testname=$1
    local driver_func=$2

    local host1=$3
    local ipport1=$4
    local ip1=$5
    local ipv6_1=$6

    local host2=$7
    local ipport2=$8
    local ip2=$9
    local ipv6_2=${10}

    ip1_setup=""
    if [ "$ip1" != "" ]; then
	ip1_setup="&& set_ipoib_up $host1 $ipport1 $ip1/24 $ipv6_1"
    fi
    ip2_setup=""
    if [ "$ip2" != "" ]; then
	ip2_setup="&& set_ipoib_up $host2 $ipport2 $ip2/24 $ipv6_2"
    fi

    if [ $DO_MAD -eq 1 ]; then
	juLog -name=h1_${testname}_opensm "kill_opensm $host1"
    fi
    juLog -name=h1_${testname} "${driver_func} $host1 ${ip1_setup}"
    juLog -name=h2_${testname} "${driver_func} $host2 ${ip2_setup}"
    if [ $DO_MAD -eq 1 ]; then
	juLog -name=h1_${testname}_start_opensm "start_opensm $host1 -p 10"
    fi
}
test_ping()
{
	local host=$1
	local remote_addr=$2
	local pkt_size=$3

	tp $host "ip neigh flush $remote_addr && ping -fq -t 3 -c 10000 -w 10 -s $pkt_size $remote_addr"
}

test_ping6()
{
	local host=$1
	local interface=$2
	local remote_addr=$3
	local pkt_size=$4

	tp $host "ip neigh flush $remote_addr && ping6 -fq -t 3 -c 10000 -w 10 -I $interface -s $pkt_size ${remote_addr}%${interface}"
}

test_sftp()
{
	local host=$1
	local remote_addr=$2

	# Generate a random file
	tp $host "rm -f sftp.orig && dd if=/dev/urandom bs=1M count=64 of=sftp.orig"
	# Copy back and forth
	tp $host "scp sftp.orig $remote_addr:sftp.orig && scp $remote_addr:sftp.orig sftp.copy"
	# Check file
	tp $host "diff -q sftp.orig sftp.copy"
}

is_connected_supported()
{
	local host=$1
	local port=$2

	mac_first_byte=$(tpq $host 'ip link show '$port' | grep link/infiniband | 
	 sed -e "s/.*link\/infiniband \([0-9a-f]\)[0-9a-f]:.*/\1/"')

	if [ $mac_first_byte -ge 8 ]; then
		return 0
	else
		return 1
	fi
}

is_enhanced_mode_togglable()
{
	local host=$1

	tpq $host 'test -f /sys/module/mlx5_ib/parameters/ipoib_enhanced'
	return $?
}
